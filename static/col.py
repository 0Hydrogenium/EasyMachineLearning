def get_pca_col():
    return [
        "p1_momentum_value_better",
        "elapsed_time",
        "server",
        "serve_no",
        "p1_ace",
        "p2_ace",
        "p1_winner",
        "p2_winner",
        "winner_shot_type",
        # "p1_double_fault",
        "p2_double_fault",
        "p1_unf_err",
        "p2_unf_err",
        "p1_net_pt",
        "p2_net_pt",
        "p1_net_pt_won",
        "p2_net_pt_won",
        "p1_break_pt",
        "p2_break_pt",
        "p1_break_pt_won",
        "p2_break_pt_won",
        "p1_break_pt_missed",
        "p2_break_pt_missed",
        "p1_distance_run",
        "p2_distance_run",
        "rally_count",
        "speed_mph",
        "serve_width",
        "serve_depth",
        "return_depth"
    ]


def get_momentum_col(p):
    return [
        "point_victor",
        "elapsed_time",
        "server",
        "serve_no",
        "{}_ace".format(p),
        # "p2_ace",
        "{}_winner".format(p),
        # "p2_winner",
        "winner_shot_type",
        # "p1_double_fault",
        # "p2_double_fault",
        "{}_unf_err".format(p),
        # "p2_unf_err",
        "{}_net_pt".format(p),
        # "p2_net_pt",
        "{}_net_pt_won".format(p),
        # "p2_net_pt_won",
        "{}_break_pt".format(p),
        # "p2_break_pt",
        "{}_break_pt_won".format(p),
        # "p2_break_pt_won",
        "{}_break_pt_missed".format(p),
        # "p2_break_pt_missed",
        "{}_distance_run".format(p),
        # "p2_distance_run",
        "rally_count",
        "speed_mph",
        "serve_width",
        "serve_depth",
        "return_depth"
    ]